<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.whu.cs.dao.IUserDao">

    <!-- 配置数据库的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="com.whu.cs.domain.User">
        <!-- 配置主键 -->
        <id property="userId" column="id"></id>
        <!-- 配置非主键 -->
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>

    <!-- 配置查询所有 -->
    <select id="findAll" resultMap="userMap">
         select * from user;
        <!-- 用给列名起别名的方式解决实体类属性名和数据库列名不一致的问题，此方法查询较快 -->
        <!--select id as userId, username as userName, address as userAddress, sex as userSex,
        birthday as userBirthday from user; -->
    </select>

    <!-- 配置保存用户 -->
    <insert id="saveUser" parameterType="User">
        <!-- 配置插入用户后，获取用户id -->
        <selectKey keyProperty="userId" keyColumn="id" resultType="Integer" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, address,sex, birthday)
        values(#{userName}, #{userAddress},#{userSex},#{userBirthday})
    </insert>

    <!-- 配置更新用户 -->
    <update id="updateUser" parameterType="com.whu.cs.domain.User">
        update user set username = #{userName}, address = #{userAddress},
        sex = #{userSex}, birthday = #{userBirthday} where id = #{userId}
    </update>

    <!-- 配置删除用户 -->
    <delete id="deleteUser" parameterType="Integer">
        delete  from user  where id = #{userId}
    </delete>

    <!-- 配置根据Id查询用户 -->
    <select id="findById" parameterType="Integer" resultMap="userMap">
        select *  from user  where id = #{userId}
    </select>

    <!-- 配置根据名称模糊查询用户 -->
    <select id="findByName" parameterType="String" resultMap="userMap">
        select *  from user  where username like #{name}
        <!-- select *  from user  where username like '%${value}%' -->
    </select>

    <!-- 配置查询总的用户数 -->
    <select id="findTotal" resultType="Integer">
        select count(id) from user
    </select>

    <!-- 配置根据封装pojo对象查询用户 -->
    <select id="findUserByVo" parameterType="com.whu.cs.domain.QueryVo" resultMap="userMap">
         select *  from user where username like #{user.userName}
    </select>
</mapper>